"use client"

import React from 'react'

//http://18.233.10.135/projeto/id_usuario}/listar

import type { NextPage } from 'next'
import Head from 'next/head'
import { fetchTodos } from '../services/api';

import { useEffect, useState } from 'react'

//import { FaCalendarWeek } from 'react-icons/fa'
//import { BsFillKanbanFill } from 'react-icons/bs'
import { DragDropContext, DropResult } from 'react-beautiful-dnd'

import InputField from '../components/inputField'
import Todos from '../components/ui/todos'

import { Status, Todo, TodosStatus, TodosView} from '../components/ui/todo'
import styles from '../app/Home.module.css'


const Home: NextPage = () => {
  const [name, setName] = useState<string>('')
  const [view, setView] = useState<TodosView>(TodosView.KanbanView)
  const [backlogTodos, setBacklogTodos] = useState<Todo[]>([])
  const [activeTodos, setActiveTodos] = useState<Todo[]>([])
  const [completedTodos, setCompletedTodos] = useState<Todo[]>([])

  useEffect(() => {
    fetchTodos()
      .then(data => {
        // Process the data and set it in your state variables
        setBacklogTodos(data.backlog);
        setActiveTodos(data.active);
        setCompletedTodos(data.completed);
      })
      .catch(error => {
        console.error('Error fetching data:', error);
      });
  }, []);

  const addNewTodo = (e: React.FormEvent) => {
    e.preventDefault()
    if (name) {
      const newTodo = {
        id: Date.now(),
        name,
        status: Status.Backlog,
        isDone: false
      }

      setBacklogTodos([...backlogTodos, newTodo])

      setName('')
    }
  }

  const onDragEndHandler = (result: DropResult) => {
    const { destination, source } = result

    if (!destination || (destination.droppableId === source.droppableId
      && destination.index === source.index)) return

      const updateApiWithNewOrder = async () => {
        const taskIdToUpdate = // Get the ID of the task being dragged
        const newStatus = // Determine the new status based on the destination droppableId
  
        try {
          await axios.put(`http://your-api-endpoint.com/todos/${taskIdToUpdate}`, { status: newStatus });
        } catch (error) {
          console.error('Error updating task:', error);
        }
      };

    let add,
      backlog = backlogTodos,
      active = activeTodos,
      complete = completedTodos

    switch (source.droppableId) {
      case TodosStatus.BacklogTodos:
        add = backlogTodos[source.index]
        backlog.splice(source.index, 1)
        break
      case TodosStatus.ActiveTodos:
        add = active[source.index]
        active.splice(source.index, 1)
        break
      case TodosStatus.CompletedTodos:
        add = complete[source.index]
        complete.splice(source.index, 1)
        break
    }

    if (add) {
      switch (destination.droppableId) {
        case TodosStatus.BacklogTodos:
          backlog.splice(destination.index, 0, add)
          break
        case TodosStatus.ActiveTodos:
          active.splice(destination.index, 0, add)
          break
        case TodosStatus.CompletedTodos:
          complete.splice(destination.index, 0, add)
          break
      }
    }

    setBacklogTodos(backlog)
    setActiveTodos(active)
    setCompletedTodos(complete)

    if (window) {
      window.localStorage.setItem('backlogTodos', JSON.stringify(backlog))
      window.localStorage.setItem('activeTodos', JSON.stringify(active))
      window.localStorage.setItem('completedTodos', JSON.stringify(complete))
    }
    await updateApiWithNewOrder();
  }


  return (
    <DragDropContext onDragEnd={onDragEndHandler}>
      <div className={styles.container}>
        <Head>
          <title>Drag-Drop-Animated-Todo</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className='flex flex-col items-center  min-h-screen pt-10'>
          <h2 className='text-4xl font-bold'>Taskify</h2>
          <div className='flex gap-3'>
            <span
              onClick={() => setView(TodosView.KanbanView)}
              className={`text-3xl text-gray-300 cursor-pointer ${view === TodosView.KanbanView ? 'text-gray-900' : ''}`}>
              {/*<BsFillKanbanFill/> */} 
            </span>
            <span
              onClick={() => setView(TodosView.WeeklyView)}
              className={`text-3xl text-gray-300 cursor-pointer ${view === TodosView.WeeklyView ? 'text-gray-900' : ''}`}>
              {/*<FaCalendarWeek />*/}
            </span>
          </div>
          <InputField
            name={name}
            setName={setName}
            addNewTodo={addNewTodo}
          />
          <Todos
            view={view}
            backlogTodos={backlogTodos}
            setBacklogTodos={setBacklogTodos}
            activeTodos={activeTodos}
            setActiveTodos={setActiveTodos}
            completedTodos={completedTodos}
            setCompletedTodos={setCompletedTodos}
          />
        </div>
      </div>
    </DragDropContext>
  )
}

Home.getInitialProps = async ({ req }) => {
  console.log('req, ')
  return {}
}

export default Home;

import { useState, useEffect } from 'react';
import axios from 'axios'; // Make sure to import Axios

// ... (your existing imports and code)

const Home: NextPage = () => {
  // ... (your existing state and other code)

  const onDragEndHandler = async (result: DropResult) => {
    const { destination, source } = result;

    if (!destination || (destination.droppableId === source.droppableId && destination.index === source.index)) return;

    // Create a function to update the API with the new task order/status
    const updateApiWithNewOrder = async () => {
      const taskIdToUpdate = // Get the ID of the task being dragged
      const newStatus = // Determine the new status based on the destination droppableId

      try {
        await axios.put(`http://your-api-endpoint.com/todos/${taskIdToUpdate}`, { status: newStatus });
      } catch (error) {
        console.error('Error updating task:', error);
      }
    };

    // ... (your existing code)

    // Call the function to update the API after adjusting the local state
    await updateApiWithNewOrder();
  }

  // ... (the rest of your component)

  return (
    // ... (your JSX and component structure)
  );
}

// ... (export and other code)



